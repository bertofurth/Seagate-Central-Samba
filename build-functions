#
# This file should not be executed, instead it should be
# "source"d by each of the build scripts.
#
# Make sure that the build-common file which contains all
# the common variable definitions has been sourced
#
export TOP=$(pwd)
export OBJ=$TOP/obj
export SRC=$TOP/src

#
# check_source_dir <source-name>
#
# Find the directory with the "latest" version of the
# given project name in the current directory.
#
# Change into this directory to allow the main script
# to perform any necessary modifications.
# 
check_source_dir()
{
        SECONDS=0
	cd $SRC
	# Automatically try to find a source directory
	# that matches the parameter given
        if [ -z $LIB_NAME ]; then
	   LIB_NAME=$(ls -1drv $1*/ | cut -f1 -d'/' | head -1)
        fi 
	
	if [ -z $LIB_NAME ]; then	
	   echo
	   echo Unable to find source directory for $1
	   echo Has the source code been extracted\? \(tar -xf\)
	   exit -1
	fi

        echo Using $LIB_NAME as source directory.
	cd $SRC/$LIBNAME
}

#
# change_into_obj_directory 
#
# Create and change into the directory $OBJ/$LIB_NAME
# where the project will be built.
#
change_into_obj_directory()
{
        cd $TOP
        mkdir -p $OBJ/$LIB_NAME
	cd $OBJ/$LIB_NAME
	if [ $? -ne 0 ]; then
	   echo
	   echo Can\'t change to $OBJ/$LIB_NAME directory
	   echo to compile library.
	   exit -1
	fi	
}

#
# configure_it [configure-params]
#
# Run the configure step with the given parameters
# and report on the status. Exit on fail.
#
# Make sure that this function is called while in
# the directory where the build will take place.
#
configure_it()
{
	$SRC/$LIB_NAME/configure "$@"
	if [ $? -ne 0 ]; then
    	   echo   
           echo configure for $LIB_NAME failed. Exiting
	   exit -1
	fi	
}
#
# make_it [make-params]
#
# Make the project with the given parameters and
# report on the status. Exit on fail.
#
# Call with "-d V=1 -j1" for debugging.
#
make_it()
{
	make -j$J $@
	if [ $? -ne 0 ]; then
    	   echo
           echo make for $LIB_NAME failed. Exiting
	   exit -1
	fi	
}

#
# install_it()
#
# Call make install for the project and report on
# the status. Exit on fail.
#
install_it()
{
	make DESTDIR=$BUILDHOST_DEST install
	if [ $? -ne 0 ]; then
    	   echo   
           echo make install of $LIB_NAME to $BUILDHOST_DEST Failed. Exiting
	   exit -1
	fi	
}

#
# finish_it()
#
# Generate a banner message reporting that the build
# has finished.
#
finish_it()
{
        echo
	echo "****************************************"
	echo 
	echo "Success! Finished installing $LIB_NAME to $BUILDHOST_DEST ($SECONDS seconds)"
	echo
	echo "****************************************"
	echo
}